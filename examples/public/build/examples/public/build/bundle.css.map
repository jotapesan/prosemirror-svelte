{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../../ProsemirrorEditor.svelte",
    "../../../App.svelte",
    "../../../RichTextEditor_104.svelte",
    "../../../RichTextEditor_105.svelte"
  ],
  "sourcesContent": [
    "<script lang=\"ts\">var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { onMount, onDestroy, createEventDispatcher } from 'svelte';\nimport { createSingleLineEditor } from './state';\nimport { EditorView } from \"prosemirror-view\";\nconst dispatch = createEventDispatcher();\n/** @type string */\nexport let className = \"ui-editor\";\n/** @type EditorState */\nexport let editorState = createSingleLineEditor();\n/** @type string */\nexport let placeholder = '';\n/** Reference to the editor view\n *  @type EditorView|null */\nexport let view = null;\n/** Debounce change events (set to zero for immediate updates) */\nexport let debounceChangeEventsInterval = 50;\n/** Reference to the editor component\n *  @type HTMLDivElement */\nexport let editor = null;\n/** Initial EditorView props */\nexport let editorViewProps = {};\n/** Focus the content-editable div */\nexport function focus() {\n    view && view.focus();\n}\n/** Blur the content-editable div */\nexport function blur() {\n    editor && editor.blur();\n}\n/** Tracks the timeout id of the last time the change event was dispatched */\nlet dispatchLastEditTimeout;\n/** Tracks whether changes to editor state were not yet dispatched */\nlet isDirty = false;\n$: if (view && editorState && !isDirty) {\n    view.updateState(editorState); // necessary to keep the DOM in sync with the editor state on external updates\n}\n/** Tracks whether the editor is empty (i.e. has a content size of 0) */\nlet editorIsEmpty;\n$: editorIsEmpty = editorState ? editorState.doc.content.size === 0\n    || (editorState.doc.textContent === \"\" && editorState.doc.content.size < 3) : true;\n/** Dispatches a change event and resets whether the editor state is dirty */\nconst dispatchChangeEvent = () => {\n    if (isDirty) {\n        dispatch('change', { editorState });\n        isDirty = false;\n    }\n};\n/**\n * Captures custom events from plugins and dispatches them with a new event type (based on event.detail.type)\n * @param event {CustomEvent}\n */\nconst onCustomEvent = event => {\n    if (event.detail) {\n        const _a = event.detail, { type } = _a, detail = __rest(_a, [\"type\"]);\n        dispatch(type || 'custom', detail);\n    }\n};\nonMount(() => {\n    view = new EditorView({ mount: editor }, Object.assign(Object.assign({}, editorViewProps), { state: editorState, dispatchTransaction: (transaction) => {\n            editorState = view.state.apply(transaction);\n            const contentHasChanged = !editorState.doc.eq(view.state.doc);\n            if (contentHasChanged) {\n                isDirty = true;\n                if (debounceChangeEventsInterval > 0) {\n                    if (dispatchLastEditTimeout)\n                        clearTimeout(dispatchLastEditTimeout);\n                    dispatchLastEditTimeout = setTimeout(dispatchChangeEvent, 50);\n                }\n                else {\n                    setTimeout(dispatchChangeEvent, 0);\n                }\n            }\n            view.updateState(editorState);\n            dispatch('transaction', { view, editorState, isDirty, contentHasChanged });\n        } }));\n});\nonDestroy(() => {\n    view.destroy();\n});\n</script>\n\n<div class={className}\n     class:ProseMirror={true}\n     class:editor_empty={editorIsEmpty}\n     data-placeholder={placeholder}\n     bind:this={editor}\n     on:focus\n     on:blur\n     on:keydown\n     on:custom={onCustomEvent}\n></div>\n\n<style>\n\n  :global(body) {\n    --ui-color-placeholder: #AAAAAA;\n  }\n\n  :global(.ProseMirror) {\n    position: relative;\n  }\n\n  :global(.ProseMirror) {\n    word-wrap: break-word;\n    white-space: pre-wrap;\n    -webkit-font-variant-ligatures: none;\n    font-variant-ligatures: none;\n  }\n\n  :global(.ProseMirror) pre {\n    white-space: pre-wrap;\n  }\n\n  :global(.ProseMirror) li {\n    position: relative;\n  }\n\n  :global(.ProseMirror-hideselection *::selection) {\n    background: transparent;\n  }\n\n  :global(.ProseMirror-hideselection *::-moz-selection) {\n    background: transparent;\n  }\n\n  :global(.ProseMirror-hideselection) {\n    caret-color: transparent;\n  }\n\n  :global(.ProseMirror-selectednode) {\n    outline: 2px solid #8cf;\n  }\n\n  /* Make sure li selections wrap around markers */\n\n  :global(li.ProseMirror-selectednode) {\n    outline: none;\n  }\n\n  :global(li.ProseMirror-selectednode:after) {\n    content: \"\";\n    position: absolute;\n    left: -32px;\n    right: -2px;\n    top: -2px;\n    bottom: -2px;\n    border: 2px solid #8cf;\n    pointer-events: none;\n  }\n\n  :global(.ProseMirror .empty-node::before) {\n    position: absolute;\n    color: #aaa;\n    cursor: text;\n  }\n\n  :global(.ProseMirror .empty-node:hover::before) {\n    color: #777;\n  }\n\n  :global(.ProseMirror.editor_empty::before) {\n    position: absolute;\n    content: attr(data-placeholder);\n    pointer-events: none;\n    color: var(--ui-color-placeholder);\n  }\n\n</style>\n",
    "<script lang=\"ts\">import PlainTextEditor from \"./components/PlainTextEditor.svelte\";\nimport RichTextEditor_101 from \"./components/RichTextEditor_101.svelte\";\nimport RichTextEditor_102 from \"./components/RichTextEditor_102.svelte\";\nimport RichTextEditor_103 from \"./components/RichTextEditor_103.svelte\";\nimport RichTextEditor_104 from \"./components/RichTextEditor_104.svelte\";\nimport RichTextEditor_105 from \"./components/RichTextEditor_105.svelte\";\nimport ProsemirrorLogo from \"./components/ProsemirrorLogo.svelte\";\nimport SvelteLogo from \"./components/SvelteLogo.svelte\";\nlet selectedExample = 'richtext_101';\nconst examples = {\n    \"plaintext\": {\n        name: '#1: Plain text',\n        title: \"Plain text editor\",\n        subtitle: \"If you don't need rich text. Dead simple to use.\",\n        component: PlainTextEditor\n    },\n    \"richtext_101\": {\n        name: '#2: Rich text',\n        title: 'Rich text 101',\n        subtitle: \"Relatively minimal editor setup, to get a hang of the basics.\",\n        component: RichTextEditor_101\n    },\n    \"richtext_102\": {\n        name: '#3: Transactions',\n        title: 'Rich text 102: Transactions',\n        subtitle: \"Listening to the on-transaction event instead of on-change, e.g. to track changes to the current selection. Useful to track the state of menu buttons.\",\n        component: RichTextEditor_102\n    },\n    \"richtext_103\": {\n        name: \"#4: Serialization\",\n        title: 'Rich text 103: JSON serialization',\n        subtitle: \"Serializing to and from JSON (and saving your state to local storage, just for fun).\",\n        component: RichTextEditor_103\n    },\n    \"richtext_104\": {\n        name: \"#5: Plugins\",\n        title: 'Rich text 104: Plugins',\n        subtitle: \"Very basic example of how to add Prosemirror plugins to the editor\",\n        component: RichTextEditor_104\n    },\n    \"richtext_105\": {\n        name: \"#6: Images\",\n        title: 'Rich text 105: Insert images',\n        subtitle: \"How to add images to the editor\",\n        component: RichTextEditor_105\n    },\n};\n</script>\n\n<main>\n\n  <div class=\"header\">\n    <h1>Prosemirror-Svelte</h1>\n\n    <div class=\"subheader\">\n      <ProsemirrorLogo/>\n      <span style=\"margin-left: .5em;\">ProseMirror bindings for</span>\n      <SvelteLogo/>\n    </div>\n  </div>\n\n  <div class=\"select_example\">\n\n    <h2>{examples[selectedExample].title}</h2>\n\n    <label>\n      <select bind:value={selectedExample}>\n          {#each Object.keys(examples) as example (example)}\n            <option value={example}>{examples[example].name}</option>\n          {/each}\n      </select>\n    </label>\n\n  </div>\n\n  <h4>{examples[selectedExample].subtitle}</h4>\n\n  <svelte:component this={examples[selectedExample].component}/>\n\n</main>\n\n<style>\n\n  .header {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    justify-content: space-between;\n    flex-wrap: wrap;\n    margin-bottom: 1em;\n  }\n\n  .subheader {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    flex-wrap: nowrap;\n  }\n\n  .select_example {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    justify-content: space-between;\n  }\n\n  main {\n    padding: 1em;\n    max-width: 48em;\n    margin: 0 auto;\n  }\n\n  img {\n    height: 2em;\n  }\n\n  h4 {\n    margin-bottom: 1em;\n  }\n\n  label {\n    margin: 0 0 0 1em;\n  }\n\n</style>\n",
    "<script>\n  import { onMount } from \"svelte\";\n  import { Plugin, PluginKey } from 'prosemirror-state';\n\n  import ProsemirrorEditor from \"../../../ProsemirrorEditor.svelte\";\n  import { createRichTextEditor, clear } from \"../../../state\";\n\n  const html = \"<p>Paste something</p>\";\n\n  let focusEditor;\n  let showEditorState = false;\n  let pasteData = null;\n  let numberOfPastes = 0;\n\n  const pasty = new PluginKey('pasty')\n\n  const handlePaste = new Plugin({\n    key: pasty,\n    props: {\n      handlePaste: function (view, event, slice) {\n        pasteData = JSON.stringify(slice, null, 2)\n        numberOfPastes += 1\n        return false\n      }\n    }\n  })\n\n  const plugins = [handlePaste];\n\n  let editorState = createRichTextEditor(html, plugins);\n\n  function handleChange(event) {\n    editorState = event.detail.editorState;\n  }\n\n  function clearEditor(event) {\n    editorState = clear(editorState);\n    pasteData = null;\n    numberOfPastes = 0;\n    focusEditor();\n  }\n\n  function resetEditor(event) {\n    editorState = createRichTextEditor(html, plugins);\n    pasteData = null;\n    numberOfPastes = 0;\n    focusEditor();\n  }\n\n  onMount(() => focusEditor());\n\n</script>\n\n<ProsemirrorEditor\n  {editorState}\n  bind:focus={focusEditor}\n  on:change={handleChange}\n  placeholder=\"Go ahead and edit me!\"/>\n\n<div class=\"controls\">\n  <button on:click={clearEditor}>Clear</button>\n  <button on:click={resetEditor}>Reset</button>\n</div>\n\n<h2>Last paste event:</h2>\n<pre>\n    {pasteData || 'Nothing pasted yet'}\n</pre>\n\n<p>Total pastes: {numberOfPastes}</p>\n\n<style>\n  pre {\n    padding: .5em;\n  }\n</style>\n",
    "<script>\n  import { onMount } from \"svelte\";\n\n  import ProsemirrorEditor from \"../../../ProsemirrorEditor.svelte\";\n  import { createRichTextEditor, clear, insertImage } from \"../../../state\";\n\n  const html = \"<h3>Welcome to Prosemirror Svelte</h3><p>Feel free to <b>edit me</b>!</p>\";\n\n  let src = 'https://images.unsplash.com/photo-1517694712202-14dd9538aa97?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=400&q=60';\n\n  let focusEditor;\n  let showEditorState = true;\n  let editorState = createRichTextEditor(html);\n\n  const plugins = [];\n\n  function handleTransaction(event) {\n    editorState = event.detail.editorState;\n  }\n\n  function clearEditor(event) {\n    editorState = clear(editorState);\n    focusEditor();\n  }\n\n  function resetEditor(event) {\n    editorState = createRichTextEditor(html);\n    focusEditor();\n  }\n\n  function handleInsertImage(event) {\n    editorState = insertImage(editorState, {src});\n  }\n\n  function preventDefault(event) {\n    event.preventDefault();\n  }\n\n  onMount(() => focusEditor());\n\n</script>\n\n<ProsemirrorEditor\n  {editorState}\n  bind:focus={focusEditor}\n  on:transaction={handleTransaction}\n  placeholder=\"Go ahead and edit me!\"/>\n\n<div class=\"controls\" style=\"display: flex\">\n  <button on:click={clearEditor}>Clear</button>\n  <button on:click={resetEditor}>Reset</button>\n\n  <input type=\"text\" bind:value={src} style=\"flex: 1\">\n\n  <button style=\"margin-left: .5em\" on:click={handleInsertImage} on:mousedown={preventDefault}>Insert image</button>\n\n</div>\n\n<style>\n  button, input {\n    margin: .5em;\n  }\n\n  input {\n    outline: none;\n  }\n\n  :global(.ui-editor img) {\n    max-width: 300px;\n  }\n</style>\n"
  ],
  "names": [],
  "mappings": "AAwGU,IAAI,AAAE,CAAC,AACb,sBAAsB,CAAE,OAAO,AACjC,CAAC,AAEO,YAAY,AAAE,CAAC,AACrB,QAAQ,CAAE,QAAQ,AACpB,CAAC,AAEO,YAAY,AAAE,CAAC,AACrB,SAAS,CAAE,UAAU,CACrB,WAAW,CAAE,QAAQ,CACrB,8BAA8B,CAAE,IAAI,CACpC,sBAAsB,CAAE,IAAI,AAC9B,CAAC,AAUO,uCAAuC,AAAE,CAAC,AAChD,UAAU,CAAE,WAAW,AACzB,CAAC,AAEO,4CAA4C,AAAE,CAAC,AACrD,UAAU,CAAE,WAAW,AACzB,CAAC,AAEO,0BAA0B,AAAE,CAAC,AACnC,WAAW,CAAE,WAAW,AAC1B,CAAC,AAEO,yBAAyB,AAAE,CAAC,AAClC,OAAO,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,AACzB,CAAC,AAIO,2BAA2B,AAAE,CAAC,AACpC,OAAO,CAAE,IAAI,AACf,CAAC,AAEO,iCAAiC,AAAE,CAAC,AAC1C,OAAO,CAAE,EAAE,CACX,QAAQ,CAAE,QAAQ,CAClB,IAAI,CAAE,KAAK,CACX,KAAK,CAAE,IAAI,CACX,GAAG,CAAE,IAAI,CACT,MAAM,CAAE,IAAI,CACZ,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,CACtB,cAAc,CAAE,IAAI,AACtB,CAAC,AAEO,gCAAgC,AAAE,CAAC,AACzC,QAAQ,CAAE,QAAQ,CAClB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,AACd,CAAC,AAEO,sCAAsC,AAAE,CAAC,AAC/C,KAAK,CAAE,IAAI,AACb,CAAC,AAEO,iCAAiC,AAAE,CAAC,AAC1C,QAAQ,CAAE,QAAQ,CAClB,OAAO,CAAE,KAAK,gBAAgB,CAAC,CAC/B,cAAc,CAAE,IAAI,CACpB,KAAK,CAAE,IAAI,sBAAsB,CAAC,AACpC,CAAC;AC5FD,OAAO,cAAC,CAAC,AACP,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,CACnB,WAAW,CAAE,MAAM,CACnB,eAAe,CAAE,aAAa,CAC9B,SAAS,CAAE,IAAI,CACf,aAAa,CAAE,GAAG,AACpB,CAAC,AAED,UAAU,cAAC,CAAC,AACV,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,CACnB,WAAW,CAAE,MAAM,CACnB,SAAS,CAAE,MAAM,AACnB,CAAC,AAED,eAAe,cAAC,CAAC,AACf,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,CACnB,WAAW,CAAE,MAAM,CACnB,eAAe,CAAE,aAAa,AAChC,CAAC,AAED,IAAI,cAAC,CAAC,AACJ,OAAO,CAAE,GAAG,CACZ,SAAS,CAAE,IAAI,CACf,MAAM,CAAE,CAAC,CAAC,IAAI,AAChB,CAAC,AAMD,EAAE,cAAC,CAAC,AACF,aAAa,CAAE,GAAG,AACpB,CAAC,AAED,KAAK,cAAC,CAAC,AACL,MAAM,CAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,AACnB,CAAC;AClDD,GAAG,eAAC,CAAC,AACH,OAAO,CAAE,IAAI,AACf,CAAC;ACfD,oBAAM,CAAE,KAAK,cAAC,CAAC,AACb,MAAM,CAAE,IAAI,AACd,CAAC,AAED,KAAK,cAAC,CAAC,AACL,OAAO,CAAE,IAAI,AACf,CAAC,AAEO,cAAc,AAAE,CAAC,AACvB,SAAS,CAAE,KAAK,AAClB,CAAC"
}